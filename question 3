# 3rd question
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv(r"C:\\Users\\user\\Desktop\\exam\\exam.csv")
df = df.replace(' ?',np.NaN)
df = df.replace(' <=5Lakhs',0)
df = df.replace(' >5Lakhs',1)
df = df.dropna()

Y = df["Income(Rs)"]
cat_X = [i for i in df.columns if i!="Income(Rs)"]
X = df[cat_X]
print(X.columns)

table = pd.crosstab(X["Age"],Y).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of Age vs Income(Rs)')
plt.xlabel('Age')
plt.ylabel('Income(Rs)(0<=5Lakhs,1>5Lakhs)')

table1 = pd.crosstab(X["Employment"],Y).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of Employment vs Income(Rs)')
plt.xlabel('Employment')
plt.ylabel('Income(Rs)(0<=5Lakhs,1>5Lakhs)')

table2 = pd.crosstab(X["MaritalStatus"],Y).plot(kind='bar', stacked=True)
#table2.div(table2.sum(1).astype(float),axis=0).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of MaritalStatus vs Income(Rs)')
plt.xlabel('MaritalStatus')
plt.ylabel('Income(Rs)(0<=5Lakhs,1>5Lakhs)')


table6 = pd.crosstab(X["Gender"],Y).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of Gender vs Income(Rs)')
plt.xlabel('Gender')
plt.ylabel('Income(Rs)(0<=5Lakhs,1>5Lakhs)')
print(df.groupby("Gender").count())

cat_vars = ['Age','Employment','MaritalStatus','Gender']
for i in cat_vars:
    cat_list = 'var'+'_'+i
    cat_list = pd.get_dummies(X[i],prefix=i)
    x1= X.join(cat_list)
    X=x1

to_keep = [i for i in X.columns if i not in cat_vars]
X_Final = X[to_keep]

# PackAges for RFE and LogisticRegression
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFE
logistic = LogisticRegression()
rfe = RFE(logistic,20)
rfe.fit(X_Final,Y)
print(rfe.support_)
print(rfe.ranking_)
selected_columns =[]
for i in range(len(rfe.support_)):
    if(rfe.support_[i] == True):
        selected_columns.append(to_keep[i])
 
X_Report = X_Final[selected_columns]       

from scipy import stats
stats.chisqprob = lambda chisq, df: stats.chi2.sf(chisq,df)
import statsmodels.api as sm
logit_model=sm.Logit(Y,X_Report)
result=logit_model.fit()
print(result.summary())

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_Report, Y, test_size=0.3, random_state=0)
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
    
y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

from sklearn import model_selection
#from sklearn.model_selection import cross_val_score
kfold = model_selection.KFold(n_splits=5, random_state=7)
modelCV = LogisticRegression()
scoring = 'accuracy'
results = model_selection.cross_val_score(modelCV, X_train, y_train, cv=kfold, scoring=scoring)
print("10-fold cross validation averAge accuracy: %.3f" % (results.mean()))

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)
